generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("STORAGE_URL_NON_POOLING") 
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  username  String    @unique
  password  String
  name      String?
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  posts     Post[]
  projects  Project[]

  @@map("users")
}

model Post {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  excerpt     String?
  content     String
  status      PostStatus  @default(DRAFT)
  featured    Boolean     @default(false)
  views       Int         @default(0)
  likes       Int         @default(0)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  authorId    String
  categoryId  String?
  comments    Comment[]
  media       PostMedia[]
  tags        PostTag[]
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category    Category?   @relation(fields: [categoryId], references: [id])

  @@map("posts")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]

  @@map("categories")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  posts     PostTag[]

  @@map("tags")
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id         String        @id @default(cuid())
  content    String
  status     CommentStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  postId     String
  authorId   String?
  guestName  String?
  guestEmail String?
  parentId   String?
  author     User?         @relation(fields: [authorId], references: [id])
  parent     Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[]     @relation("CommentReplies")
  post       Post          @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Media {
  id           String      @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  alt          String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  posts        PostMedia[]

  @@map("media")
}

model PostMedia {
  id      String @id @default(cuid())
  postId  String
  mediaId String
  media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, mediaId])
  @@map("post_media")
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model Project {
  id           String        @id @default(cuid())
  title        String
  slug         String        @unique
  description  String
  content      String?
  technologies String?
  category     String?
  githubUrl    String?
  liveUrl      String?
  status       ProjectStatus @default(DRAFT)
  featured     Boolean       @default(false)
  views        Int           @default(0)
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  authorId     String
  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("projects")
}

enum Role {
  USER
  ADMIN
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProjectStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}
